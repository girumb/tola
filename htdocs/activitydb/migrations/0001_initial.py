# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
from django.conf import settings


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('silo', '__first__'),
        ('read', '0002_auto_20150202_1342'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255, verbose_name=b'Cluster Name', blank=True)),
                ('create_date', models.DateTimeField(null=True, blank=True)),
                ('edit_date', models.DateTimeField(null=True, blank=True)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255, null=True, verbose_name=b'Community', blank=True)),
                ('latitude', models.CharField(max_length=255, null=True, verbose_name=b'Latitude (Coordinates)', blank=True)),
                ('longitude', models.CharField(max_length=255, null=True, verbose_name=b'Longitude (Coordinates)', blank=True)),
                ('community_rep', models.CharField(max_length=255, null=True, verbose_name=b'Community Representative', blank=True)),
                ('community_rep_contact', models.CharField(max_length=255, null=True, verbose_name=b'Community Representative Contact', blank=True)),
                ('community_mobilizer', models.CharField(max_length=255, null=True, verbose_name=b'Community Mobilizer', blank=True)),
                ('create_date', models.DateTimeField(null=True, blank=True)),
                ('edit_date', models.DateTimeField(null=True, blank=True)),
                ('cluster', models.ForeignKey(blank=True, to='activitydb.Cluster', null=True)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Contribution',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('contributor', models.CharField(max_length=255, verbose_name=b'Contributor', blank=True)),
                ('description', models.CharField(max_length=255, verbose_name=b'Description of Contribution', blank=True)),
                ('value', models.CharField(max_length=255, verbose_name=b'Value of Contribution', blank=True)),
                ('actual', models.BooleanField(default=None, verbose_name=b'Is an Actual Contribution')),
                ('create_date', models.DateTimeField(null=True, blank=True)),
                ('edit_date', models.DateTimeField(null=True, blank=True)),
            ],
            options={
                'ordering': ('contributor',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('country', models.CharField(max_length=255, verbose_name=b'Country Name', blank=True)),
                ('code', models.CharField(max_length=4, verbose_name=b'2 Letter Country Code', blank=True)),
                ('description', models.CharField(max_length=255, verbose_name=b'Description/Notes', blank=True)),
                ('latitude', models.CharField(max_length=255, null=True, verbose_name=b'Latitude', blank=True)),
                ('longitude', models.CharField(max_length=255, null=True, verbose_name=b'Longitude', blank=True)),
                ('create_date', models.DateTimeField(null=True, blank=True)),
                ('edit_date', models.DateTimeField(null=True, blank=True)),
            ],
            options={
                'ordering': ('country',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255, verbose_name=b'District Name', blank=True)),
                ('create_date', models.DateTimeField(null=True, blank=True)),
                ('edit_date', models.DateTimeField(null=True, blank=True)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Documentation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=135, verbose_name=b'Name of Document')),
                ('url', models.CharField(max_length=135, null=True, verbose_name=b'URL (Link to document or document repository)', blank=True)),
                ('description', models.CharField(max_length=255)),
                ('file_field', models.FileField(null=True, upload_to=b'uploads', blank=True)),
                ('create_date', models.DateTimeField(null=True, blank=True)),
                ('edit_date', models.DateTimeField(null=True, blank=True)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='MergeMap',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('from_column', models.CharField(max_length=255, blank=True)),
                ('to_column', models.CharField(max_length=255, blank=True)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('gaitid', models.CharField(unique=True, max_length=255, verbose_name=b'GAITID', blank=True)),
                ('name', models.CharField(max_length=255, verbose_name=b'Program Name', blank=True)),
                ('funding_status', models.CharField(max_length=255, verbose_name=b'Funding Status', blank=True)),
                ('description', models.CharField(max_length=765, null=True, verbose_name=b'Program Description', blank=True)),
                ('create_date', models.DateTimeField(null=True, blank=True)),
                ('edit_date', models.DateTimeField(null=True, blank=True)),
                ('country', models.ManyToManyField(to='activitydb.Country')),
            ],
            options={
                'ordering': ('create_date',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProgramDashboard',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('project_proposal_approved', models.IntegerField(null=True, blank=True)),
                ('project_agreement_approved', models.IntegerField(null=True, blank=True)),
                ('project_completion_approved', models.IntegerField(null=True, blank=True)),
                ('create_date', models.DateTimeField(null=True, blank=True)),
                ('edit_date', models.DateTimeField(null=True, blank=True)),
                ('program', models.ForeignKey(blank=True, to='activitydb.Program', null=True)),
            ],
            options={
                'ordering': ('program',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProjectAgreement',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('profile_code', models.CharField(max_length=255, null=True, verbose_name=b'Profile Code', blank=True)),
                ('proposal_num', models.CharField(max_length=255, null=True, verbose_name=b'Proposal Number', blank=True)),
                ('date_of_request', models.DateTimeField(null=True, verbose_name=b'Date of Request', blank=True)),
                ('project_name', models.CharField(max_length=255, null=True, verbose_name=b'Project Title', blank=True)),
                ('project_type', models.CharField(max_length=255, null=True, verbose_name=b'Proposal Number', blank=True)),
                ('prop_status', models.CharField(max_length=255, null=True, verbose_name=b'Proposal Status', blank=True)),
                ('rej_letter', models.TextField(null=True, verbose_name=b'Rejection Letter', blank=True)),
                ('activity_code', models.CharField(max_length=255, null=True, verbose_name=b'Activity Code', blank=True)),
                ('office_code', models.CharField(max_length=255, null=True, verbose_name=b'Office Code', blank=True)),
                ('cod_num', models.CharField(max_length=255, null=True, verbose_name=b'Project COD #', blank=True)),
                ('project_activity', models.CharField(max_length=255, null=True, verbose_name=b'Project Activity', blank=True)),
                ('account_code', models.CharField(max_length=255, null=True, verbose_name=b'Account Code', blank=True)),
                ('sub_code', models.CharField(max_length=255, null=True, verbose_name=b'Account Sub Code', blank=True)),
                ('staff_responsible', models.CharField(max_length=255, null=True, verbose_name=b'MC Staff Responsible', blank=True)),
                ('partners', models.CharField(max_length=255, null=True, verbose_name=b'Partners', blank=True)),
                ('name_of_partners', models.CharField(max_length=255, null=True, verbose_name=b'Name of Partners', blank=True)),
                ('program_objectives', models.TextField(null=True, verbose_name=b'What Program Objectives does this help fulfill?', blank=True)),
                ('mc_objectives', models.TextField(null=True, verbose_name=b'What MC strategic Objectives does this help fulfill?', blank=True)),
                ('effect_or_impact', models.TextField(null=True, verbose_name=b'What is the anticipated effect of impact of this project?', blank=True)),
                ('expected_start_date', models.DateTimeField(null=True, blank=True)),
                ('expected_end_date', models.DateTimeField(null=True, blank=True)),
                ('beneficiary_type', models.CharField(max_length=255, null=True, verbose_name=b'Type of direct beneficiaries', blank=True)),
                ('num_direct_beneficiaries', models.CharField(max_length=255, null=True, verbose_name=b'Number of direct beneficiaries', blank=True)),
                ('total_estimated_budget', models.CharField(max_length=255, null=True, blank=True)),
                ('mc_estimated_budget', models.CharField(max_length=255, null=True, blank=True)),
                ('other_budget', models.CharField(max_length=255, null=True, blank=True)),
                ('estimation_date', models.DateTimeField(null=True, blank=True)),
                ('approval', models.BooleanField(default=None, verbose_name=b'Approval')),
                ('justification_background', models.TextField(null=True, verbose_name=b'General background and problem statement', blank=True)),
                ('justification_description_community_selection', models.TextField(null=True, verbose_name=b'Description of community selection criteria', blank=True)),
                ('description_of_project_activities', models.TextField(null=True, blank=True)),
                ('description_of_government_involvement', models.TextField(null=True, blank=True)),
                ('description_of_community_involvement', models.TextField(null=True, blank=True)),
                ('documentation_government_approval', models.FileField(upload_to=b'uploads', null=True, verbose_name=b'Upload Government Documentation of Approval', blank=True)),
                ('documentation_community_approval', models.FileField(upload_to=b'uploads', null=True, verbose_name=b'Upload Community Documentation of Approval', blank=True)),
                ('create_date', models.DateTimeField(null=True, verbose_name=b'Date Created', blank=True)),
                ('edit_date', models.DateTimeField(null=True, verbose_name=b'Last Edit Date', blank=True)),
                ('approved_by', models.ForeignKey(related_name='approving_agreement', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('checked_by', models.ForeignKey(related_name='checking', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('community', models.ManyToManyField(to='activitydb.Community', null=True, blank=True)),
                ('estimated_by', models.ForeignKey(related_name='estimating', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('program', models.ForeignKey(related_name='agreement', blank=True, to='activitydb.Program', null=True)),
            ],
            options={
                'ordering': ('create_date',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProjectComplete',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('project_name', models.CharField(max_length=255, null=True, verbose_name=b'Project Title', blank=True)),
                ('activity_code', models.CharField(max_length=255, null=True, verbose_name=b'Activity Code', blank=True)),
                ('project_name', models.CharField(max_length=255, null=True, verbose_name=b'Project Name', blank=True)),
                ('expected_start_date', models.DateTimeField(null=True, blank=True)),
                ('expected_end_date', models.DateTimeField(null=True, blank=True)),
                ('actual_start_date', models.DateTimeField(null=True, blank=True)),
                ('actual_end_date', models.DateTimeField(null=True, blank=True)),
                ('on_time', models.BooleanField(default=None)),
                ('no_explanation', models.TextField(null=True, verbose_name=b'If not on time explain delay', blank=True)),
                ('estimated_budget', models.CharField(max_length=255, null=True, verbose_name=b'Estimated Budget', blank=True)),
                ('actual_budget', models.CharField(max_length=255, null=True, verbose_name=b'Actual Budget', blank=True)),
                ('budget_variance', models.CharField(max_length=255, null=True, verbose_name=b'Budget Variance', blank=True)),
                ('explanation_of_variance', models.CharField(max_length=255, null=True, verbose_name=b'Explanation of variance', blank=True)),
                ('direct_beneficiaries', models.CharField(max_length=255, null=True, verbose_name=b'Actual Direct Beneficiaries', blank=True)),
                ('jobs_created', models.CharField(max_length=255, null=True, verbose_name=b'Number of Jobs Created', blank=True)),
                ('jobs_part_time', models.CharField(max_length=255, null=True, verbose_name=b'Part Time Jobs', blank=True)),
                ('jobs_full_time', models.CharField(max_length=255, null=True, verbose_name=b'Full Time Jobs', blank=True)),
                ('government_involvement', models.CharField(max_length=255, null=True, verbose_name=b'Government Involvement', blank=True)),
                ('capacity_built', models.CharField(max_length=255, null=True, verbose_name=b'What capacity was built to ensure sustainability?', blank=True)),
                ('issues_and_challenges', models.TextField(null=True, verbose_name=b'List any issues or challenges faced (include reasons for delays)', blank=True)),
                ('lessons_learned', models.TextField(null=True, verbose_name=b'Lessons learned', blank=True)),
                ('approval', models.BooleanField(default=None, verbose_name=b'Approval')),
                ('create_date', models.DateTimeField(null=True, verbose_name=b'Date Created', blank=True)),
                ('edit_date', models.DateTimeField(null=True, verbose_name=b'Last Edit Date', blank=True)),
                ('actual_contribution', models.ForeignKey(to='activitydb.Contribution')),
                ('approved_by', models.ForeignKey(related_name='approving_agreement_complete', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('checked_by', models.ForeignKey(related_name='checking_complete', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('community', models.ManyToManyField(to='activitydb.Community', null=True, blank=True)),
                ('estimated_by', models.ForeignKey(related_name='estimating_complete', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('program', models.ForeignKey(related_name='complete', blank=True, to='activitydb.Program', null=True)),
                ('project_agreement', models.ForeignKey(to='activitydb.ProjectAgreement')),
            ],
            options={
                'ordering': ('create_date',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ProjectProposal',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('profile_code', models.CharField(max_length=255, null=True, verbose_name=b'Profile Code', blank=True)),
                ('proposal_num', models.CharField(max_length=255, null=True, verbose_name=b'Proposal Number', blank=True)),
                ('date_of_request', models.DateTimeField(null=True, verbose_name=b'Date of Request', blank=True)),
                ('project_name', models.CharField(max_length=255, null=True, verbose_name=b'Project Title', blank=True)),
                ('project_type', models.CharField(max_length=255, null=True, verbose_name=b'Project Type', blank=True)),
                ('prop_status', models.CharField(max_length=255, null=True, verbose_name=b'Proposal Status', blank=True)),
                ('rej_letter', models.TextField(null=True, verbose_name=b'Rejection Letter', blank=True)),
                ('activity_code', models.CharField(max_length=255, null=True, verbose_name=b'Activity Code', blank=True)),
                ('project_description', models.TextField(null=True, verbose_name=b'Project Description', blank=True)),
                ('approval', models.BooleanField(default=None, verbose_name=b'Approval')),
                ('approval_remarks', models.CharField(max_length=255, null=True, verbose_name=b'Approval Remarks', blank=True)),
                ('device_id', models.CharField(max_length=255, null=True, verbose_name=b'Device ID', blank=True)),
                ('date_approved', models.DateTimeField(null=True, blank=True)),
                ('proposal_review', models.FileField(upload_to=b'uploads', null=True, verbose_name=b'Proposal Review', blank=True)),
                ('proposal_review_2', models.FileField(upload_to=b'uploads', null=True, verbose_name=b'Proposal Review Additional', blank=True)),
                ('today', models.DateTimeField(null=True, blank=True)),
                ('start_time', models.DateTimeField(null=True, blank=True)),
                ('end_time', models.DateTimeField(null=True, blank=True)),
                ('meta_instance_id', models.CharField(max_length=255, null=True, verbose_name=b'Meta Instance ID', blank=True)),
                ('meta_instance_name', models.CharField(max_length=255, null=True, verbose_name=b'Meta Instance Name', blank=True)),
                ('odk_id', models.CharField(max_length=255, null=True, verbose_name=b'ODK ID', blank=True)),
                ('odk_uuid', models.CharField(max_length=255, null=True, verbose_name=b'ODK UUID', blank=True)),
                ('odk_submission_time', models.DateTimeField(null=True, verbose_name=b'ODK Submission Time', blank=True)),
                ('odk_index', models.CharField(max_length=255, null=True, verbose_name=b'ODK Index', blank=True)),
                ('odk_parent_table_name', models.CharField(max_length=255, null=True, verbose_name=b'ODK Table Name', blank=True)),
                ('odk_tags', models.CharField(max_length=255, null=True, verbose_name=b'ODK Tags', blank=True)),
                ('odk_notes', models.CharField(max_length=255, null=True, verbose_name=b'ODK Notes', blank=True)),
                ('create_date', models.DateTimeField(null=True, verbose_name=b'Date Created', blank=True)),
                ('edit_date', models.DateTimeField(null=True, verbose_name=b'Last Edit Date', blank=True)),
                ('latitude', models.CharField(max_length=255, null=True, verbose_name=b'Latitude (Coordinates)', blank=True)),
                ('longitude', models.CharField(max_length=255, null=True, verbose_name=b'Longitude (Coordinates)', blank=True)),
                ('approval_submitted_by', models.ForeignKey(related_name='requesting', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('approved_by', models.ForeignKey(related_name='approving', blank=True, to=settings.AUTH_USER_MODEL, null=True)),
                ('community', models.ManyToManyField(to='activitydb.Community', null=True, blank=True)),
                ('program', models.ForeignKey(related_name='proposal', blank=True, to='activitydb.Program', null=True)),
            ],
            options={
                'ordering': ('create_date',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255, verbose_name=b'Province Name', blank=True)),
                ('create_date', models.DateTimeField(null=True, blank=True)),
                ('edit_date', models.DateTimeField(null=True, blank=True)),
                ('country', models.ForeignKey(to='activitydb.Country')),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='QuantitativeOutputs',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('number_achieved', models.CharField(max_length=255, verbose_name=b'Contributor', blank=True)),
                ('description', models.CharField(max_length=255, verbose_name=b'Description of Contribution', blank=True)),
                ('in_logframe', models.BooleanField(default=None, verbose_name=b'Is this Indicator in the Logframe?')),
                ('create_date', models.DateTimeField(null=True, blank=True)),
                ('edit_date', models.DateTimeField(null=True, blank=True)),
            ],
            options={
                'ordering': ('description',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('sector', models.CharField(max_length=255, verbose_name=b'Sector Name', blank=True)),
                ('create_date', models.DateTimeField(null=True, blank=True)),
                ('edit_date', models.DateTimeField(null=True, blank=True)),
            ],
            options={
                'ordering': ('sector',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Template',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=135, verbose_name=b'Name of Document')),
                ('documentation_type', models.CharField(max_length=135, verbose_name=b'Type (File or URL)')),
                ('description', models.CharField(max_length=255)),
                ('file_field', models.FileField(null=True, upload_to=b'uploads', blank=True)),
                ('create_date', models.DateTimeField(null=True, blank=True)),
                ('edit_date', models.DateTimeField(null=True, blank=True)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Village',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255, verbose_name=b'Village Name', blank=True)),
                ('create_date', models.DateTimeField(null=True, blank=True)),
                ('edit_date', models.DateTimeField(null=True, blank=True)),
                ('district', models.ForeignKey(to='activitydb.District')),
            ],
            options={
                'ordering': ('name',),
            },
            bases=(models.Model,),
        ),
        migrations.AddField(
            model_name='projectcomplete',
            name='project_proposal',
            field=models.ForeignKey(to='activitydb.ProjectProposal'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='projectcomplete',
            name='quantitative_outputs',
            field=models.ForeignKey(to='activitydb.QuantitativeOutputs'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='projectcomplete',
            name='reviewed_by',
            field=models.ForeignKey(related_name='reviewing_complete', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='projectagreement',
            name='project_proposal',
            field=models.ForeignKey(to='activitydb.ProjectProposal'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='projectagreement',
            name='reviewed_by',
            field=models.ForeignKey(related_name='reviewing', blank=True, to=settings.AUTH_USER_MODEL, null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='projectagreement',
            name='sector',
            field=models.ForeignKey(blank=True, to='activitydb.Sector', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='programdashboard',
            name='project_agreement',
            field=models.ForeignKey(blank=True, to='activitydb.ProjectAgreement', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='programdashboard',
            name='project_completion',
            field=models.ForeignKey(blank=True, to='activitydb.ProjectComplete', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='programdashboard',
            name='project_proposal',
            field=models.ForeignKey(blank=True, to='activitydb.ProjectProposal', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mergemap',
            name='project_agreement',
            field=models.ForeignKey(to='activitydb.ProjectAgreement', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mergemap',
            name='project_completion',
            field=models.ForeignKey(to='activitydb.ProjectComplete', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mergemap',
            name='project_proposal',
            field=models.ForeignKey(to='activitydb.ProjectProposal', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='mergemap',
            name='read',
            field=models.ForeignKey(to='read.Read'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='documentation',
            name='project',
            field=models.ForeignKey(blank=True, to='activitydb.ProjectProposal', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='documentation',
            name='silo',
            field=models.ForeignKey(blank=True, to='silo.Silo', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='documentation',
            name='template',
            field=models.ForeignKey(blank=True, to='activitydb.Template', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='district',
            name='province',
            field=models.ForeignKey(to='activitydb.Province'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='community',
            name='country',
            field=models.ForeignKey(to='activitydb.Country'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='community',
            name='district',
            field=models.ForeignKey(blank=True, to='activitydb.District', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='community',
            name='province',
            field=models.ForeignKey(blank=True, to='activitydb.Province', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='community',
            name='village',
            field=models.ForeignKey(blank=True, to='activitydb.Village', null=True),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='cluster',
            name='district',
            field=models.ForeignKey(to='activitydb.District'),
            preserve_default=True,
        ),
    ]
